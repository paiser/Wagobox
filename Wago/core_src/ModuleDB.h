//
//
//  Generated by StarUML(tm) C++ Add-In
//
//  @ Project : Wago Modbus Tango Server
//  @ File Name : ModuleDB.h
//  @ Date : 2013-02-03
//  @ Author : Pawel Kowaliszyn
//
//


#if !defined(_MODULEDB_H)
#define _MODULEDB_H

#include "Tools.h"

class PhysValueTransformer;

#define INPUT	('I'<<8)
#define OUTPUT	('O'<<8)
#define BINARY	'B'
#define REGISTER 'W'

#define BINARY_INPUT	(INPUT+BINARY)
#define REGISTER_INPUT	(INPUT+REGISTER)
#define BINARY_OUTPUT	(OUTPUT+BINARY)
#define REGISTER_OUTPUT	(OUTPUT+REGISTER)
#define BINARY_MIXED	(('M'<<8)+'B')
#define REGISTER_MIXED	(('M'<<8)+'W')

//
// Special input treatements
//

#define NONE_RES      "none"
#define SSI_RES       "ssi"
#define THC_100_RES       "thc100"
#define THC_RES       "thc"
#define FS_RES        "fs"
#define M637_RES      "637"
#define M653_RES      "653"


//!Structure holding description of wago module.
typedef struct _wago_module {
	string name;				//!Module name.
	unsigned short modCode;		//!Numerical code of module.
	unsigned short   mtype; 	//!Type of module IB, OB, IW, OW.
	unsigned int   digi_in; 	//!Number of digital inputs in one channel of module.
	unsigned int   digi_out; 	//!Number of digital outputs in one channel of module.
	unsigned int   ana_in; 		//!Number of analog inputs in one channel of module.
	unsigned int   ana_out; 	//!Number of analog outputs in one channel of module.
	unsigned int   channels; 	//!Number of channels in one channel of module.
	string special;				//!Contents of modules special field in configuration.
	string description; 		//!Text desciription of module.
	PhysValueTransformer* physTransformer; //!Pointer to physical value transformation object related to module.
} wagoModuleDesc;


/*!Module database holds descriptions of all recognized wago modules.
 * This is class has only one object instance.
 *
 */
class ModuleDB
{
public:
	static ModuleDB* Instance();
	wagoModuleDesc* FindModule(string reference);
	void ParseCatalogue(vector<string> &resources);
	void ReferenceModule(wagoModuleDesc* module);
	void DereferenceModule(wagoModuleDesc* module);
private:
	ModuleDB();
	virtual ~ModuleDB();
	void ParseCatalogueLine(vector<string> &lineVals);
	void AttachPhysTransformer(wagoModuleDesc &modDesc);
	void CreatePhysTransformers();

	vector<wagoModuleDesc> moduleList; //! List of known modules descritors.
	static ModuleDB* _instance; //! pointer to instance of database(Singleton design pattern).
	omni_mutex protectMutex;  //!Mutex securing access to database from different threads.
};

#endif  //_MODULEDB_H
