//
//
//  Generated by StarUML(tm) C++ Add-In
//
//  @ Project : Wago Modbus Tango Server
//  @ File Name : PhysValueTransformer.h
//  @ Date : 2013-02-03
//  @ Author : Pawel Kowaliszyn
//
//


#if !defined(_PHYSVALUETRANSFORMER_H)
#define _PHYSVALUETRANSFORMER_H

#include "ModuleDB.h"

/*!Generic class for physical value transformers. Physical value transformer is an object responsible for
 * conversion between binary and physical values of modules.
 */
class PhysValueTransformer
{
public:
	PhysValueTransformer();
	virtual void Setup(wagoModuleDesc& modDescriptor){};
	virtual void TransformInput(unsigned short* inputValue, float& transformedValue);
	virtual void TransformOutput(unsigned short* inputValue, float& transformedValue);
	virtual void TransformOutputWrite(unsigned short* inputValue, float& transformedValue);

	void ReferenceObj(){
		referenceCtr++;
		DB_DEBUG_STREAM << "ReferenceObj() referenceCtr: " << referenceCtr << endl;
	};
	void DereferenceObj()
	{
		if(referenceCtr)
			referenceCtr--;
		DB_DEBUG_STREAM << "DereferenceObj() referenceCtr: " << referenceCtr << endl;
	};
	unsigned int GetReferenceCtr(){return referenceCtr;};
protected:
	unsigned int referenceCtr; //! Counter of references to transformer object.

};

/*!Configurable transformer class. This class may be configured for differend bitsize of physical variable, and sclalling factor value.
 *
 */
class ConfigurableSizePhysTransformer: public PhysValueTransformer
{
public:
	ConfigurableSizePhysTransformer(unsigned int numOfBits, float scallingFactorValue, bool s);
	virtual void TransformInput(unsigned short* inputValue, float& transformedValue);
	virtual void TransformOutput(unsigned short* inputValue, float& transformedValue);
	virtual void TransformOutputWrite(unsigned short* inputValue, float& transformedValue);

protected:
	unsigned int bits; //!Bitsize of physicall variable
	float scallingFactor; //!scalling factor (variable will be multiplied by this factor during input conversion and divided during output conversion).
	bool sign;	//! If true variable has signed value, in other case value is unsigned.

	friend class Configurator;

};

/*!Transformer class for Analog I/O modules.
 *
 */
class FsTransformer: public PhysValueTransformer
{
public:
	FsTransformer();
	virtual void Setup(wagoModuleDesc& modDescriptor);
	virtual void TransformInput(unsigned short* inputValue, float& transformedValue);
	virtual void TransformOutput(unsigned short* inputValue, float& transformedValue);
	virtual void TransformOutputWrite(unsigned short* inputValue, float& transformedValue);

private:
	float DequantizeSigned(short value, unsigned short bitSize);
	unsigned short QuantizeSigned(float value, unsigned short bitSize);

        float scaleFactor;
	float MaxValue;
	float MinValue; //TODO change name to zero value
	unsigned short numberOfBitsToShift;
  	bool unipolar;
/*	bool overSizeBitPresent;
	bool shortCutBitPresent;
*/

};

/*Transformer class for thermocouple modules
 *
 */
class ThcTransformer: public PhysValueTransformer
{
public:
	ThcTransformer();
	virtual void TransformInput(unsigned short* inputValue, float& transformedValue);
	virtual void TransformOutput(unsigned short* inputValue, float& transformedValue);
	virtual void TransformOutputWrite(unsigned short* inputValue, float& transformedValue);
};

/*Transformer class for thermocouple modules
 *
 */
class Thc100Transformer: public PhysValueTransformer
{
public:
	Thc100Transformer();
	virtual void TransformInput(unsigned short* inputValue, float& transformedValue);
	virtual void TransformOutput(unsigned short* inputValue, float& transformedValue);
	virtual void TransformOutputWrite(unsigned short* inputValue, float& transformedValue);
};

/*Transformer class for ssi encoder modules
 *
 */
class SSITransformer: public PhysValueTransformer
{
public:
	SSITransformer();
	virtual void Setup(wagoModuleDesc& modDescriptor);
	virtual void TransformInput(unsigned short* inputValue, float& transformedValue);
	virtual void TransformOutput(unsigned short* inputValue, float& transformedValue);
	virtual void TransformOutputWrite(unsigned short* inputValue, float& transformedValue);
private:
	unsigned int bits;
};

#endif  //_PHYSVALUETRANSFORMER_H
